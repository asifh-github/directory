Part A - HTML/CSS:

Create two a files called “histogram.html” and “histogram.css” to recreate (as close as possible) the picture below, leaving out the circles on right hand side of the “Histogram” div box (please note that the box around the picture is to indicate the boundaries of the picture and should not be included on the webpage). The values of the input boxes should also be initialized accordingly.

the image depicts A heading called "Histogram Generator".
Under that, there are two columns (both with gray backgrounds): 
- the left column contains a heading called "Lower bounds" which contains textboxes for the user to enter cutoffs for each of the letter grades A+, A, A-, B+, ... , F.  
- the right column contains a heading called "Histogram" that displays the current number of students in each letter grade using the 'O' characters.  Under that, there is a textbox labelled "New Grade" that allows the user to enter a new grade item as a number.

You may make any reasonable guesses on fonts, colors and measurements. 

 

Part B – JavaScript

Create a file called “calculate.js”.  This file will contain a variable array called ‘grades’ representing the grades of all students in a particular class. For this assignment, you may hard code this into your JavaScript file. For example, the result above could have been generated from the following array

var grades = [65.95, 56.98, 78.62, 96.1, 90.3, 72.24, 92.34, 60.00, 81.43, 86.22, 88.33, 9.03,
     49.93, 52.34, 53.11, 50.10, 88.88, 55.32, 55.69, 61.68, 70.44, 70.54, 90.0, 71.11, 80.01];

Please note that there is one student in the A+ range, three students in the A range, etc …

Features:

The user will be allowed to enter new values into this array by entering the number in the "New Grade" textbox. For this feature, the user shall be able to press enter to add the new value into the array or alternatively, you may wish to add a "submit" button.
Each time the user changes the lower bounds of any of the letter-grades or when a new grade item is entered, the Histogram should dynamically adjust itself to represent the number of students in each range. I used the letter ‘O’ to represent a student, but please be creative here, you can use table cells, div box widths, etc.
If there is an invalid input of any kind, i.e. bounds of letter-grades overlap, string is entered as input, your program should deal with it accordingly (it is up to you how you’d like to do that :D). Try to give useful feedback, try to imagine yourself using such a system.
Hint: You may want to consider JavaScript events/functions:

onkeypress()

onkeyup()

getElementsByTagName()

getElementsByName()

 

 

Usability and Effort:

A small portion of the grade will be dedicated to usability and effort, this is learnability and like-ability. Existence of bugs, lack of error checking may result in a lower usability score.  

 

Constraints:

In this assignment, you may not use frontend frameworks or libraries such as Angular, React, Bootstrap, or jQuery.  You will have many opportunities to use these (if you'd like) in the future :)

 

Marking Scheme:

Part A –
4 marks: The colors, fonts, and spacing should follow the picture as much as possible. For example, a shade of red would be a reasonable guess at the background color of the page; a shade of blue would not. The following site may give you some insight:
SFU Toolkit

Part B –
12 marks: The correct values should be calculated and all described functions should be working.
4 marks: Usability. 

Project: 3 Marks
Running on Heroku
project pushed onto Gitlab (in addition to the git link provided by Heroku) - We must be able to find your working app at the webapp link, and should be able to clone your project at the git link.

 

Submission:

Your webpage could either be stored in the “public” folder of your Heroku webspace or in a view (i.e. in '/views/index.ejs'). As with all subsequent assignments/project iterations, you should submit a text file with the following information onto canvas.

The URL of your webapp, this is where we’ll be able to play around with your application. It is your responsibility to ensure that you have the correct URL.  If the TAs cannot find it, he/she cannot mark it.
Your git link, this is where we can view your code, your progress and time of submission.
NOTE: Please see the "add a git push URL to your project" tutorial.  If you choose to make your repo private, please add the TAs as collaborators onto your GitLab project (https://csil-git1.cs.surrey.sfu.ca/):
Anant username: asa404
Hemang username: hba42
 If you are somehow unable to push it to Heroku, you may get some marks if you upload your work as a zip file.