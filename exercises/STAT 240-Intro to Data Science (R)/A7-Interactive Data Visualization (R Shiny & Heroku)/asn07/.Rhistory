coord_cartesian(ylim=c(0, 1000000), xlim=c(0, 100))
par(mfrow=c(1, 1))
radius = c(1:10000)
volume = 4/3*pi*radius^3
plot(radius, volume, main="Line + Point plot of volume vs. radius (using type='b')",
xlab="radius", ylab="volume",
ylim=c(0, 10000000), xlim=c(0, 100),
type='l', col="green", lwd=2)
par(mfrow=c(1, 1))
radius = c(1:10000)
volume = 4/3*pi*radius^3
plot(radius, volume, main="Line + Point plot of volume vs. radius (using type='b')",
xlab="radius", ylab="volume",
ylim=c(0, 10000000), xlim=c(0, 200),
type='l', col="green", lwd=2)
par(mfrow=c(1, 1))
radius = c(1:10000)
volume = 4/3*pi*radius^3
plot(radius, volume, main="Line + Point plot of volume vs. radius (using type='b')",
xlab="radius", ylab="volume",
ylim=c(0, 10000000), xlim=c(0, 150),
type='l', col="green", lwd=2)
par(mfrow=c(1, 1))
radius = c(1:10000)
volume = 4/3*pi*radius^3
plot(radius, volume, main="Line + Point plot of volume vs. radius (using type='b')",
xlab="radius", ylab="volume",
ylim=c(0, 1000000), xlim=c(0, 100),
type='l', col="green", lwd=2)
par(mfrow=c(1, 1))
radius = c(1:10000)
volume = 4/3*pi*radius^3
plot(radius, volume, main="Line + Point plot of volume vs. radius (using type='b')",
xlab="radius", ylab="volume",
ylim=c(0, 100000), xlim=c(0, 50),
type='l', col="green", lwd=2)
par(mfrow=c(1, 1))
radius = c(1:10000)
volume = 4/3*pi*radius^3
plot(radius, volume, main="Line + Point plot of volume vs. radius (using type='b')",
xlab="radius", ylab="volume",
ylim=c(0, 1500000), xlim=c(0, 50),
type='l', col="green", lwd=2)
par(mfrow=c(1, 1))
radius = c(1:10000)
volume = 4/3*pi*radius^3
plot(radius, volume, main="Line + Point plot of volume vs. radius (using type='b')",
xlab="radius", ylab="volume",
ylim=c(0, 1500000), xlim=c(0, 80),
type='l', col="green", lwd=2)
par(mfrow=c(1, 1))
radius = c(1:10000)
volume = 4/3*pi*radius^3
plot(radius, volume, main="Line + Point plot of volume vs. radius (using type='l')",
xlab="radius", ylab="volume",
ylim=c(0, 1500000), xlim=c(0, 80),
type='l', col="green", lwd=2)
library(ggplot2)
dat = data.frame(raduis=radius, volume=volume)
dat
ggplot(dat, aes(x=radius, y=volume)) + geom_line(color="blue") +
labs(x="radius", y="volume", title="Line + Point plot of volume vs. radius (ggplot)") +
coord_cartesian(ylim=c(0, 1500000), xlim=c(0, 80))
X <- c(155/3394, 3239/3394)
Y = c(50/155, 105/155)
X*Y
X[1]
X
intersect(X, Y)
X[1]*Y[1:2]
X[1:2]*Y[1:2]
X[2]*Y[1:2]
# not hostilized
x0 = 3239/3394
# hospitalized
x1 = 155/3394
# not vaccinated
y0 = 1386/3394
# vaccinated
y1 = 2008/3394
# not hostilized
x0 = 3239/3394; x0
# hospitalized
x1 = 155/3394; x1
# not vaccinated
y0 = 1386/3394; y0
# vaccinated
y1 = 2008/3394; y1
# y0, x0
y0/x0
# y0, x1
y0/x1
# y1, x0
y1/x0
# y1, x1
y1/x1
# not hostilized
x0 = 3239/3394; x0
# hospitalized
x1 = 155/3394; x1
# not vaccinated
y0 = 1386/3394; y0
# vaccinated
y1 = 2008/3394; y1
library(RCurl)
install.packages("RCurl")
library(RCurl)
url = "https://bbc.com/"
dat = getURL(url)
dat
url = "https://bbc.com/"
dat = getURL(url)
dat
install.packages("stringr")
library(twitteR)
library(lubridate)
library(stringr)
load("~/Documents/stat240/asn5/translink.RData")
names(data)
getdat = function (n) {
print(data[[n]][["created"]])
print(data[[n]][["text"]])
}
## 1
translink = function(year, month, day, hour) {
result = list("start"=vector(mode='character'), "stop"=vector(mode='character'))
date_time = ymd_h(toString(c(year, month, day, hour)))
date_time = substr(date_time, 1, 13)
for(i in 1:length(data)) {
if(date_time == substr(data[[i]][["created"]], 1, 13)) {
if(str_detect(data[[i]][["text"]], "#RiderAlert")) {
if(str_detect(data[[i]][["text"]], "CLEAR|(C|c)lear|ended|over|returned")) {
result$stop[length(result$stop)+1] =
str_extract(data[[i]][["text"]], "\\w?\\d+\\b")
}
else if(str_detect(data[[i]][["text"]], "detour|delays")) {
result$start[length(result$start)+1] =
str_extract(data[[i]][["text"]], "\\w?\\d+\\b")
}
print(data[[i]])
}
}
}
return(result)
}
translink(2022, 2, 14, 2)
translink(2022, 2, 14, 15)
translink(2022, 2, 14, 6)
translink(2020, 1, 26, 3)
paste0("232", sada, 231)
paste0(2020, 121, 122, 0)
paste0(20202,12)
paste0(20202,12, sep=" ")
ymd(paste0(2020,2,2))
paste(2020,2,2, sep='-')
ymd("2020-2-2")
ymd(paste(2020, 2, 1, sep="-"))
paste(ymd(paste(2020, 2, 1, sep="-")), 0, sep='-')
paste(ymd(paste(2020, 2, 1, sep="-")), 0, sep=' ')
ymd_h(paste(ymd(paste(2020, 2, 1, sep="-")), 0, sep='-'))
ymd_h(paste((paste(2020, 2, 1, sep="-")), 0, sep='-'))
ymd_h(paste((paste(2020, 2, 1, sep="-")), 1, sep=' '))
ymd_h(paste((paste(2020, 2, 1, sep="-")), 0, sep=' '))
ymd_h(paste((paste(2020, 2, 1, sep="-")), 00, sep=' '))
ymd_hms()
?ymd_hms
ymd_hms("2020-02-01")
ymd_hms(2020-02-01)
ymd_h("2020-02-01", "0")
ymd_h("2020-02-01 0")
?ymd_h()
?ymd_h
paste(paste(2020,2,2,sep='-'),1, sep=' ')
ymd_h("2020-2-2 1")
ymd_h("2020-2-2 0")
ymd_h("2020-2-2 0000")
ymd_h("2020-2-2 0", tunacated=1)
ymd_h("2020-2-2 0", truncated=1)
ymd_h("2020-2-2 0", truncated=2)
ymd_h("2020-2-2 000", truncated=2)
ymd_h("2020-2-2 1")
ymd_h("2020-2-2 0")
ymd_h("2020-2-2 24")
data[[1]][["created"]]
ymd("2020-02-23 16:08:12 UTC")
ymd_h("2020-2-2 0am")
ymd_h("2020-2-2 24am")
?h
?%h
?density
?bin
s = [["c1", "c2", "c3"], [1.1, 2, 2], [1, 2, 2.3]]
fromJSON([["c1", "c2", "c3"], [1.1, 2, 2], [1, 2, 2.3]])
library(jsonlite)
library(RCurl)
fromJSON([["c1", "c2", "c3"], [1.1, 2, 2], [1, 2, 2.3]])
fromJSON(["c1", "c2", "c3"], [1.1, 2, 2], [1, 2, 2.3])
?list
list = ("c1"=c(1,2,3), "c2"=c(2,2,2), "c3"=c(2,3,3))
l = list("c1"=c(1,2,3), "c2"=c(2,2,2), "c3"=c(2,3,3))
l
toJSON(l)
l = list(c(c1, c2, c3), c(2,2,2), c(2,3,3))
l = list(c("c1", "c2", "c3"), c(2,2,2), c(2,3,3))
l
toJSON(l)
fromJSON(l)
l = list(c("c1", "c2", "c3"), c(2, 2, 2), c(3,3,3))
toJSON(l)
fromJSON(toJSON(l))
l
l = list(c("c1", "c2", "c3"), c(2, 2, 2), c(3, 3, 3))
toJSON(l)
fromJSON(toJSON(l))
data.frame(fromJSON(toJSON(l)))
data.frame(l)
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
fromJSON(toJSON(l))
fromJSON(toJSON(l))
?data.frame()
dat =fromJSON(toJSON(l))
data.frame(
dat[1, 1] = dat[2:3, 1],
dat[1, 2] = dat[2:3, 2],
dat[1, 3] = dat[2:3, 3]
)
dat =fromJSON(toJSON(l))
data.frame(
dat[1, 1] = dat[2:3, 1],
dat[1, 2] = dat[2:3, 2],
dat[1, 3] = dat[2:3, 3]
)
data.frame(
dat,
row.names(dat[1,])
)
dat =fromJSON(toJSON(l))
data.frame(
dat,
row.names(dat[1,1])
)
dat =fromJSON(toJSON(l))
data.frame(
dat,
row.names=dat[1,]
)
dat =fromJSON(toJSON(l))
data.frame(
dat,
col.names=dat[1,]
)
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
dat =fromJSON(toJSON(l))
data.frame(
dat
)
dat =fromJSON(toJSON(l))
data.frame(
dat[2:, ]
)
data.frame(
dat[2:3, ]
)
data.frame(
dat[1, ] = dat[2:3, ]
)
library(stringr)
# Fragile X syndrome.
# Problem 1: Determine how many times the triplets "AGG" or "CGG" occurs in a string, bracketed on the left by GCG and on the right by CTG. Assume that there is only one sequence of "AGG" or "CTG" triplets such bracketed, and also there can be flanking strings outside the brackets of any form aside from the form "GCG(AGG|CGG)*CTG".
# For example:
example1 = 'GCGAGGCGGCGGCGGCGGAGGCTG'
# Desited output:
6
example2 = 'GCGTTTGCGAGGCGGCGGCGGCGGCTGTTT'
# Desited output:
5
fragileX = function(s) {
interior = str_extract(s, "GCG(AGG|CGG)*CTG")
if (is.na(interior)) {
return(0)
} else {
n = nchar(interior)
return((n-6)/3)
}
}
fragileX(example1)
fragileX(example2)
# Problem 2: We now consider that there may be multiple strings of the form "GCG(AGG|CGG)*CTG" within the target, and we want to count the number of times AGG or CGG triplets occur bracketed by GCG and CTG anywhere in the string.
# For example:
example3 = 'GCGAGGCTGGCGCGGCTG'
# Desited output:
2
example4 = 'TTTTGCGAGGCGGCGGCGGCGGAGGCTGTTTTGCGAGGCTGTTTT'
# Desited output:
7
fragileX = function(s) {
interior = str_extract_all(s, "GCG(AGG|CGG)*CTG")[[1]]
if (length(interior) == 0) {
return(0)
} else {
result = 0
for (i in 1:length(interior)) {
n = nchar(interior[i])
result = result + ((n-6)/3)
}
return(result)
}
}
fragileX(example3)
fragileX(example4)
url = "https://pitchfork.com/reviews/best/albums/"
dat = getURL(url)
dat
url = "https://pitchfork.com/reviews/albums/fireboy-dml-apollo/"
dat = getURL(url)
dat
url = "https://pitchfork.com/reviews/albums/fireboy-dml-apollo/"
dat = getURL(url)
dat
url = "https://pitchfork.com/reviews/albums/fireboy-dml-apollo/"
dat = getURL(url)
dat
view(dat)
View(dat)
View(dat[1])
]
view(dat)
str_extract("6:30", ":")
library(stringr)
str_extract("6:30", ":")
str_extract("6:30", "\\:")
str_extract("6:30", "?!\\:")
str_extract("::::::", "\\:")
str_extract("::::::", ":")
str_extract("::::::", "\\")
library(jsonlite)
?toJSON
?fromJSON
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
dat =fromJSON(toJSON(l))
data.frame(
dat[1, ] = dat[2:3, ]
)
library(jsonlite)
?toJSON
?fromJSON
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
dat =fromJSON(toJSON(l))
data.frame(
dat,
row.names = TRUE
)
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
dat =fromJSON(toJSON(l))
data.frame(
dat[2:-1, ],
row.names = TRUE
)
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
dat =fromJSON(toJSON(l))
data.frame(
dat[2:3, ],
row.names = TRUE
)
library(jsonlite)
?toJSON
?fromJSON
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
dat =fromJSON(toJSON(l))
data.frame(
dat,
col.names = TRUE
)
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
dat =fromJSON(toJSON(l))
data.frame(
dat[1,1] = 0
)
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
dat =fromJSON(toJSON(l))
data.frame(
dat[1,1] = 0
)
library(jsonlite)
?toJSON
?fromJSON
l = list(c("c1", "c2", "c3"), c(2.2, 2, 2), c(3, 3.2, 33.3))
toJSON(l)
dat =fromJSON(toJSON(l))
data.frame(
dat[1,1] = 0
)
?autoInvalidate
setwd("~/Documents/stat240/asn7/lab07")
dat <- read.table("breast-cancer-wisconsin.data")
ClumpThickness <- vector(mode="numeric")
UniformityOfCellSize <- vector(mode="numeric")
UniformityOfCellShape <- vector(mode="numeric")
MarginalAdhesion <- vector(mode="numeric")
SingleEpithelialCellSize <- vector(mode="numeric")
for(i in 1:length(dat[[1]])) {
vec <- strtoi(str_extract_all(dat[[1]][i], "\\d+\\b")[[1]])
# dupm rows that contain missing values
if(length(vec) == 11) {
# use 5 variables
ClumpThickness[length(ClumpThickness)+1] <- vec[2]
UniformityOfCellSize[length(UniformityOfCellSize)+1] <- vec[3]
UniformityOfCellShape[length(UniformityOfCellShape)+1] <- vec[4]
MarginalAdhesion[length(MarginalAdhesion)+1] <- vec[5]
SingleEpithelialCellSize[length(SingleEpithelialCellSize)+1] <- vec[6]
}
}
df <- data.frame("ClumpThickness"=ClumpThickness,
"UniformityOfCellSize"=UniformityOfCellSize,
"UniformityOfCellShape"=UniformityOfCellShape,
"MarginalAdhesion"=MarginalAdhesion,
"SingleEpithelialCellSize"=SingleEpithelialCellSize)
library(shiny)
library(stringr)
# example from https://shiny.rstudio.com/gallery/kmeans-example.html
dat <- read.table("breast-cancer-wisconsin.data")
ClumpThickness <- vector(mode="numeric")
UniformityOfCellSize <- vector(mode="numeric")
UniformityOfCellShape <- vector(mode="numeric")
MarginalAdhesion <- vector(mode="numeric")
SingleEpithelialCellSize <- vector(mode="numeric")
for(i in 1:length(dat[[1]])) {
vec <- strtoi(str_extract_all(dat[[1]][i], "\\d+\\b")[[1]])
# dupm rows that contain missing values
if(length(vec) == 11) {
# use 5 variables
ClumpThickness[length(ClumpThickness)+1] <- vec[2]
UniformityOfCellSize[length(UniformityOfCellSize)+1] <- vec[3]
UniformityOfCellShape[length(UniformityOfCellShape)+1] <- vec[4]
MarginalAdhesion[length(MarginalAdhesion)+1] <- vec[5]
SingleEpithelialCellSize[length(SingleEpithelialCellSize)+1] <- vec[6]
}
}
df <- data.frame("ClumpThickness"=ClumpThickness,
"UniformityOfCellSize"=UniformityOfCellSize,
"UniformityOfCellShape"=UniformityOfCellShape,
"MarginalAdhesion"=MarginalAdhesion,
"SingleEpithelialCellSize"=SingleEpithelialCellSize)
df
shinyUI(
fluidPage(
pageWithSidebar(
headerPanel('Density of Breast Cancer Wisconsin Data Set'),
sidebarPanel(
selectInput('xcol', 'Variable', vars)
),
mainPanel(
plotOutput('plot1')
)
)
)
)
library(shiny)
# example from https://shiny.rstudio.com/gallery/kmeans-example.html
# Define UI for application that plots random distributions
vars <- c("ClumpThickness",
"UniformityOfCellSize",
"UniformityOfCellShape",
"MarginalAdhesion",
"SingleEpithelialCellSize")
shinyUI(
fluidPage(
pageWithSidebar(
headerPanel('Density of Breast Cancer Wisconsin Data Set'),
sidebarPanel(
selectInput('xcol', 'Variable', vars)
),
mainPanel(
plotOutput('plot1')
)
)
)
)
dat <- read.table("breast-cancer-wisconsin.data")
ClumpThickness <- vector(mode="numeric")
UniformityOfCellSize <- vector(mode="numeric")
UniformityOfCellShape <- vector(mode="numeric")
MarginalAdhesion <- vector(mode="numeric")
SingleEpithelialCellSize <- vector(mode="numeric")
for(i in 1:length(dat[[1]])) {
vec <- strtoi(str_extract_all(dat[[1]][i], "\\d+\\b")[[1]])
# dump rows that contain missing values
if(length(vec) == 11) {
# use 5 variables
ClumpThickness[length(ClumpThickness)+1] <- vec[2]
UniformityOfCellSize[length(UniformityOfCellSize)+1] <- vec[3]
UniformityOfCellShape[length(UniformityOfCellShape)+1] <- vec[4]
MarginalAdhesion[length(MarginalAdhesion)+1] <- vec[5]
SingleEpithelialCellSize[length(SingleEpithelialCellSize)+1] <- vec[6]
}
}
df <- data.frame("ClumpThickness"=ClumpThickness,
"UniformityOfCellSize"=UniformityOfCellSize,
"UniformityOfCellShape"=UniformityOfCellShape,
"MarginalAdhesion"=MarginalAdhesion,
"SingleEpithelialCellSize"=SingleEpithelialCellSize)
df
strtoi("1, 2, 4")
