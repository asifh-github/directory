download.file(url, f)
}
# read file
s = readChar(f, file.info(f)$size)
# get rid of new-line chars
s = gsub("[\r\n]", "", s)
# match title from episode
m = str_match(s, ',"name":"(.*?)",')
titles = c(titles, m[[2]])
# match synopsis from episode
m = str_match(s, '"plot":\\{"plotText":\\{"plainText":"(.*?)",')
synopses = c(synopses, m[[2]])
# match ratings from episode
m = str_match_all(s, ',"ratingValue":(.*?)\\},')
ratings = c(ratings, as.numeric(m[[1]][dim(m[[1]])[1],2]))
}
}
else {
print("-Data NOT Consistent-")
}
}
# create df
df = data.frame(date=dates, title=titles, rating = ratings,
synopsis = synopses)
(dim(df))
View(df)
# order df w.r.t. date (asc)
df_ordered = df[order(dates), ]
(dim(df_ordered))
View(df_ordered)
library(stringr)
library(lubridate)
dates = c()
titles = c()
synopses = c()
ratings = c()
count = 0
total = 1014
# loop over the years
for(year in 1999:2022) {
# download year webpage
f = sprintf('downloads/years/y%04d.html', year)
if (!file.exists(f)) {
download.file(sprintf('https://www.imdb.com/title/tt0388629/episodes?year=%d', year), f)
}
# read file
s = readChar(f, file.info(f)$size)
# get rid of new-line chars
s = gsub("[\r\n]", "", s)
# match all airdates
# (for check b/c episode no. not consistent on website, need dates)
m1 = str_match_all(s, "<div class=\"airdate\">(.*?)</div>")
m1 = m1[[1]]
l1 = dim(m1)[1]
# match all episode links
m2 = str_match_all(s, "<strong><a href=\"/title/tt(.*?)\"")
m2 = m2[[1]]
l2 = dim(m2)[1]
# simple check for consistency
if(l1 == l2) {
# loop over the episodes
for(episode in 1:l2) {
# programmer progress ui
count = count + 1
print(paste0(count, ' \ ', total, ' Completed...'))
# get rid of white-space(s)
d = trimws(m1[episode,2])
u = trimws(m2[episode,2])
# get date
d = dmy(d)
dates = c(dates, d)
# download episode info.
token = sprintf('y%04de%02d', year, episode)
url = paste0('https://www.imdb.com/title/tt', u)
f = paste0('downloads/episodes/', token, '.html')
if (!file.exists(f)) {
download.file(url, f)
}
# read file
s = readChar(f, file.info(f)$size)
# get rid of new-line chars
s = gsub("[\r\n]", "", s)
# match title from episode
m = str_match(s, ',"name":"(.*?)",')
titles = c(titles, m[[2]])
# match synopsis from episode
m = str_match(s, '"plot":\\{"plotText":\\{"plainText":"(.*?)",')
synopses = c(synopses, m[[2]])
# match ratings from episode
m = str_match_all(s, ',"ratingValue":(.*?)\\},')
ratings = c(ratings, as.numeric(m[[1]][dim(m[[1]])[1],2]))
}
}
else {
print("-Data NOT Consistent-")
}
}
# create df
df = data.frame(date=dates, title=titles, rating = ratings,
synopsis = synopses)
(dim(df))
View(df)
# order df w.r.t. date (asc)
df_ordered = df[order(dates), ]
(dim(df_ordered))
View(df_ordered)
library(stringr)
library(lubridate)
dates = c()
titles = c()
synopses = c()
ratings = c()
count = 0
total = 1014
# loop over the years
for(year in 1999:2022) {
# download year webpage
f = sprintf('downloads/years/y%04d.html', year)
if (!file.exists(f)) {
download.file(sprintf('https://www.imdb.com/title/tt0388629/episodes?year=%d', year), f)
}
# read file
s = readChar(f, file.info(f)$size)
# get rid of new-line chars
s = gsub("[\r\n]", "", s)
# match all airdates
# (for check b/c episode no. not consistent on website, need dates)
m1 = str_match_all(s, "<div class=\"airdate\">(.*?)</div>")
m1 = m1[[1]]
l1 = dim(m1)[1]
# match all episode links
m2 = str_match_all(s, "<strong><a href=\"/title/tt(.*?)\"")
m2 = m2[[1]]
l2 = dim(m2)[1]
# simple check for consistency
if(l1 == l2) {
# loop over the episodes
for(episode in 1:l2) {
# programmer progress ui
count = count + 1
print(paste0(count, ' \ ', total, ' Completed..'))
# get rid of white-space(s)
d = trimws(m1[episode,2])
u = trimws(m2[episode,2])
# get date
#d = dmy(d)
dates = c(dates, d)
# download episode info.
token = sprintf('y%04de%02d', year, episode)
url = paste0('https://www.imdb.com/title/tt', u)
f = paste0('downloads/episodes/', token, '.html')
if (!file.exists(f)) {
download.file(url, f)
}
# read file
s = readChar(f, file.info(f)$size)
# get rid of new-line chars
s = gsub("[\r\n]", "", s)
# match title from episode
m = str_match(s, ',"name":"(.*?)",')
titles = c(titles, m[[2]])
# match synopsis from episode
m = str_match(s, '"plot":\\{"plotText":\\{"plainText":"(.*?)",')
synopses = c(synopses, m[[2]])
# match ratings from episode
m = str_match_all(s, ',"ratingValue":(.*?)\\},')
ratings = c(ratings, as.numeric(m[[1]][dim(m[[1]])[1],2]))
}
print("End of process--")
}
else {
print("-Data NOT Consistent-")
}
}
# create df
df = data.frame(date=dates, title=titles, rating = ratings,
synopsis = synopses)
(dim(df))
View(df)
# order df w.r.t. date (asc)
df_ordered = df[order(dates), ]
(dim(df_ordered))
View(df_ordered)
library(stringr)
library(lubridate)
dates = c()
titles = c()
synopses = c()
ratings = c()
count = 0
total = 1014
# loop over the years
for(year in 1999:2022) {
# download year webpage
f = sprintf('downloads/years/y%04d.html', year)
if (!file.exists(f)) {
download.file(sprintf('https://www.imdb.com/title/tt0388629/episodes?year=%d', year), f)
}
# read file
s = readChar(f, file.info(f)$size)
# get rid of new-line chars
s = gsub("[\r\n]", "", s)
# match all airdates
# (for check b/c episode no. not consistent on website, need dates)
m1 = str_match_all(s, "<div class=\"airdate\">(.*?)</div>")
m1 = m1[[1]]
l1 = dim(m1)[1]
# match all episode links
m2 = str_match_all(s, "<strong><a href=\"/title/tt(.*?)\"")
m2 = m2[[1]]
l2 = dim(m2)[1]
# simple check for consistency
if(l1 == l2) {
# loop over the episodes
for(episode in 1:l2) {
# programmer progress ui
count = count + 1
print(paste0(count, ' \ ', total, ' Completed..'))
# get rid of white-space(s)
d = trimws(m1[episode,2])
u = trimws(m2[episode,2])
# get date
#d = dmy(d)
dates = c(dates, d)
# download episode info.
token = sprintf('y%04de%02d', year, episode)
url = paste0('https://www.imdb.com/title/tt', u)
f = paste0('downloads/episodes/', token, '.html')
if (!file.exists(f)) {
download.file(url, f)
}
# read file
s = readChar(f, file.info(f)$size)
# get rid of new-line chars
s = gsub("[\r\n]", "", s)
# match title from episode
m = str_match(s, ',"name":"(.*?)",')
titles = c(titles, m[[2]])
# match synopsis from episode
m = str_match(s, '"plot":\\{"plotText":\\{"plainText":"(.*?)",')
synopses = c(synopses, m[[2]])
# match ratings from episode
m = str_match_all(s, ',"ratingValue":(.*?)\\},')
ratings = c(ratings, as.numeric(m[[1]][dim(m[[1]])[1],2]))
}
}
else {
print("-Data NOT Consistent-")
}
print("End of process--")
}
# create df
df = data.frame(date=dates, title=titles, rating = ratings,
synopsis = synopses)
(dim(df))
View(df)
# order df w.r.t. date (asc)
df_ordered = df[order(dates), ]
(dim(df_ordered))
View(df_ordered)
library(stringr)
library(lubridate)
dates = c()
titles = c()
synopses = c()
ratings = c()
count = 0
total = 1014
# loop over the years
for(year in 1999:2022) {
# download year webpage
f = sprintf('downloads/years/y%04d.html', year)
if (!file.exists(f)) {
download.file(sprintf('https://www.imdb.com/title/tt0388629/episodes?year=%d', year), f)
}
# read file
s = readChar(f, file.info(f)$size)
# get rid of new-line chars
s = gsub("[\r\n]", "", s)
# match all airdates
# (for check b/c episode no. not consistent on website, need dates)
m1 = str_match_all(s, "<div class=\"airdate\">(.*?)</div>")
m1 = m1[[1]]
l1 = dim(m1)[1]
# match all episode links
m2 = str_match_all(s, "<strong><a href=\"/title/tt(.*?)\"")
m2 = m2[[1]]
l2 = dim(m2)[1]
# simple check for consistency
if(l1 == l2) {
# loop over the episodes
for(episode in 1:l2) {
# programmer progress ui
count = count + 1
print(paste0(count, ' \ ', total, ' Completed..'))
# get rid of white-space(s)
d = trimws(m1[episode,2])
u = trimws(m2[episode,2])
# get date
#d = dmy(d)
dates = c(dates, d)
# download episode info.
token = sprintf('y%04de%02d', year, episode)
url = paste0('https://www.imdb.com/title/tt', u)
f = paste0('downloads/episodes/', token, '.html')
if (!file.exists(f)) {
download.file(url, f)
}
# read file
s = readChar(f, file.info(f)$size)
# get rid of new-line chars
s = gsub("[\r\n]", "", s)
# match title from episode
m = str_match(s, ',"name":"(.*?)",')
titles = c(titles, m[[2]])
# match synopsis from episode
m = str_match(s, '"plot":\\{"plotText":\\{"plainText":"(.*?)",')
synopses = c(synopses, m[[2]])
# match ratings from episode
m = str_match_all(s, ',"ratingValue":(.*?)\\},')
ratings = c(ratings, as.numeric(m[[1]][dim(m[[1]])[1],2]))
}
}
else {
print("-Data NOT Consistent-")
}
}
print("End of process--")
# create df
df = data.frame(date=dates, title=titles, rating = ratings,
synopsis = synopses)
(dim(df))
View(df)
# order df w.r.t. date (asc)
df_ordered = df[order(dates), ]
(dim(df_ordered))
View(df_ordered)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10))
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
cex=0.1)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
cex=0.2)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
cex=0.5)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
type='b', cex=0.5)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
type='b', cex=1)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
type='l', cex=0.5)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
type='l', lwd=1, cex=0.5)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
type='l', lwd=.5, cex=0.5)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
type='l', cex=0.5)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
type='l', col=3, cex=0.5)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over-time', ylim= c(0,10),
type='l', col=2, cex=0.5)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over time', ylim= c(0,10),
type='l', col=1, cex=0.5)
# plot rating over time
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece ratings -vs- episode/over time', ylim= c(0,10),
type='l', col=2, cex=0.5)
# plot rating over time
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece (anime) ratings -vs- episode/over time', ylim= c(0,10),
type='l', col=2, cex=0.5)
# plot rating over time
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece (anime) IMDb ratings -vs- episode/over time', ylim= c(0,10),
type='l', col=2, cex=0.5)
library(tidytext)
sent = get_sentiments()
sent
sentiments = c()
for (i in 1:length(synopses)) {
synopsis = synopses[i]
words = table(unlist(strsplit(trimws(synopsis), '\\s+')))
words = data.frame(word = names(words), count = as.numeric(words))
if (dim(words)[1] > 1) {
joined = merge(x = words, y = sent, by = "word")
sentiment = sum(joined[, "sentiment"] == "positive") - sum(joined[, "sentiment"] == "negative")
sentiments = c(sentiments, sentiment)
print(sentiment)
}
}
length(synopses)
synopsis = synopses[i]
synopsis = synopses[1]
synopsis
words = table(unlist(strsplit(trimws(synopsis), '\\s+')))
words
words = data.frame(word = names(words), count = as.numeric(words))
words
words = table(unlist(strsplit(trimws(synopsis), '\\s+')))
dim(words)
words
names(words)
synopsis
trimws(synopsis)
strsplit(trimws(synopsis), '\\s+')
unlist(strsplit(trimws(synopsis), '\\s+'))
table(unlist(strsplit(trimws(synopsis), '\\s+')))
?table
count(table(unlist(strsplit(trimws(synopsis), '\\s+'))))
words = table(unlist(strsplit(trimws(synopsis), '\\s+')))
names(words)
as.numeric(words)
merge(x = words, y = sent, by = "word")
words = table(unlist(strsplit(trimws(synopsis), '\\s+')))
words = data.frame(word = names(words), count = as.numeric(words))
merge(x = words, y = sent, by = "word")
words
joined = merge(x = words, y = sent, by = "word")
sum(joined[, "sentiment"] == "positive") - sum(joined[, "sentiment"] == "negative")
library(tidytext)
sent = get_sentiments()
sentiments = c()
for (i in 1:length(synopses)) {
synopsis = synopses[i]
words = table(unlist(strsplit(trimws(synopsis), '\\s+')))
words = data.frame(word = names(words), count = as.numeric(words))
# names(x) -> word, as.numeric(x) -> count
if (dim(words)[1] > 1) {
joined = merge(x = words, y = sent, by = "word")
sentiment = sum(joined[, "sentiment"] == "positive") - sum(joined[, "sentiment"] == "negative")
sentiments = c(sentiments, sentiment)
print(sentiment)
}
}
is.na(NA)
!is.na(NA)
!is.na("sadasd")
# do sentiment analysis
library(tidytext)
sent = get_sentiments()
sentiments = c()
for(i in 1:length(synopses)) {
if(!is.na(synopses[i])) {
synopsis = synopses[i]
words = table(unlist(strsplit(trimws(synopsis), '\\s+')))
words = data.frame(word = names(words), count = as.numeric(words))
# names(x) -> word, as.numeric(x) -> count
if (dim(words)[1] > 1) {
joined = merge(x = words, y = sent, by = "word")
sentiment = sum(joined[, "sentiment"] == "positive") - sum(joined[, "sentiment"] == "negative")
sentiments = c(sentiments, sentiment)
print(sentiment)
}
}
}
words = table(unlist(strsplit(trimws(synopsis), '\\s+')))
words = data.frame(word = names(words), count = as.numeric(words))
dim(words)[1]
words
dim(words)[1] > 1
# do sentiment analysis
library(tidytext)
sent = get_sentiments()
sentiments = c()
for(i in 1:length(synopses)) {
if(!is.na(synopses[i])) {
synopsis = synopses[i]
words = table(unlist(strsplit(trimws(synopsis), '\\s+')))
words = data.frame(word = names(words), count = as.numeric(words))
# names(x) -> word, as.numeric(x) -> count
if (dim(words)[1] > 1) {
joined = merge(x = words, y = sent, by = "word")
sentiment = sum(joined[, "sentiment"] == "positive") - sum(joined[, "sentiment"] == "negative")
sentiments = c(sentiments, sentiment)
print(sentiment)
}
}
}
plot(sentiments, ylab = 'Sentiment', xlab = 'Episode', main = 'One Piece synopses sentiments')
plot(sentiments, ylab = 'Sentiment', xlab = 'Episode',
main = 'One Piece synopses sentiments', col=2, cex=0.5)
plot(sentiments, ylab = 'Sentiment', xlab = 'Episode',
main = 'One Piece synopses sentiments', col=2, cex=2)
plot(sentiments, ylab = 'Sentiment', xlab = 'Episode',
main = 'One Piece synopses sentiments', col=2, cex=10)
plot(sentiments, ylab = 'Sentiment', xlab = 'Episode',
main = 'One Piece synopses sentiments', col=2, lwd=5)
plot(sentiments, ylab = 'Sentiment', xlab = 'Episode',
main = 'One Piece synopses sentiments', col=2, lwd=2, cex=.8)
plot(sentiments, ylab = 'Sentiment', xlab = 'Episode',
main = 'One Piece synopses sentiments', col=2, lwd=2, cex=.5)
plot(sentiments, ylab = 'Sentiment', xlab = 'Episode',
main = 'One Piece synopses sentiments', col=2, lwd=2, cex=1)
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece (anime) IMDb ratings -vs- episode/over time', ylim= c(0,10),
type='l', col=2, cex=1)
# plot rating over time
plot(ratings, xlab = 'Episode', ylab = "Rating",
main = 'One Piece (anime) IMDb ratings -vs- episode/over time', ylim= c(0,10),
type='l', col=2, cex=1)
